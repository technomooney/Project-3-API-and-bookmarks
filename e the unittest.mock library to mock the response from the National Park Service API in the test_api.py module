[33mcommit e52408be4298c3d5db8e22108d8cf7bc9ccd80ae[m[33m ([m[1;36mHEAD -> [m[1;32mNPS_API[m[33m, [m[1;31morigin/NPS_API[m[33m)[m
Author: Oscar  A. Chiqui <anibalchiqui88@hotmail.com>
Date:   Sat Mar 11 19:19:47 2023 -0600

    this module  test_api.py, to test the api module's functions using the unittest module."
    
    This reverts commit

[1mdiff --git a/web_api/national_park/test_api.py b/web_api/national_park/test_api.py[m
[1mdeleted file mode 100644[m
[1mindex 926cd7e..0000000[m
[1m--- a/web_api/national_park/test_api.py[m
[1m+++ /dev/null[m
[36m@@ -1,44 +0,0 @@[m
[31m-import unittest[m
[31m-from api import park_data_collection[m
[31m-[m
[31m-# In this test module, we import the api.py module and the Park class to test the park_data_collection function.[m
[31m-from api import park_data_collection[m
[31m-[m
[31m-class TestApi(unittest.TestCase):[m
[31m-[m
[31m-# We test the function by calling it with different parameters.[m
[31m-    def test_park_data_collection(self):[m
[31m-        # Test with state = "ca", search_query = "", park_code = None, limit = 5[m
[31m-[m
[31m-        parks = park_data_collection("ca")[m
[31m-        self.assertEqual(len(parks), 5)[m
[31m-        self.assertEqual(parks[0].__class__.__name__, "Park")[m
[31m-        self.assertIsNotNone(parks[0].full_name)[m
[31m-        self.assertIsNotNone(parks[0].park_code)[m
[31m-        self.assertIsNotNone(parks[0].lat)[m
[31m-        self.assertIsNotNone(parks[0].lon)[m
[31m-        self.assertIsNotNone(parks[0].phone)[m
[31m-        self.assertIsNotNone(parks[0].email)[m
[31m-        self.assertIsNotNone(parks[0].entrance_fees)[m
[31m-        self.assertIsNotNone(parks[0].entrance_passes)[m
[31m-        self.assertIsNotNone(parks[0].operating_hours)[m
[31m-        [m
[31m-        # Test with state  = "co", search_query = "canyon, park_code = None, limit = 10 "[m
[31m-        # We also test that each park object in the list has all its attributes populated with[m
[31m-[m
[31m-        parks = park_data_collection("co", "canyon", None, 10)[m
[31m-        self.assertEqual(len(parks), 10)[m
[31m-        self.assertEqual(parks[0].__class__.__name__, "Park")[m
[31m-        self.assertIsNotNone(parks[0].full_name)[m
[31m-        self.assertIsNotNone(parks[0].park_code)[m
[31m-        self.assertIsNotNone(parks[0].lat)[m
[31m-        self.assertIsNotNone(parks[0].lon)[m
[31m-        self.assertIsNotNone(parks[0].phone)[m
[31m-        self.assertIsNotNone(parks[0].email)[m
[31m-        self.assertIsNotNone(parks[0].entrance_fees)[m
[31m-        self.assertIsNotNone(parks[0].entrance_passes)[m
[31m-        self.assertIsNotNone(parks[0].operating_hours)[m
[31m-[m
[31m-# We use unittest.main() to run the tests when we run the module directly.[m
[31m-if __name__ == '__main__':[m
[31m-    unittest.main()        [m
\ No newline at end of file[m
